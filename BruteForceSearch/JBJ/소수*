import java.util.HashSet;

class Solution {
   
        static char[] chr;
        static HashSet<Integer> hash = new HashSet<>();
        static boolean[] visited;

        public int solution(String numbers) {
            int answer = 0;
            chr = new char[numbers.length()];
            visited = new boolean[numbers.length()];

            for (int i = 0; i < numbers.length(); i++) {
                chr[i] = numbers.charAt(i);
            }

            recursion("", 0);

            answer = hash.size();
            //v  vvv
            return answer;
        }

        public void recursion(String str, int index) {
            int num;
            if (str != "") {
                num = Integer.parseInt(str);
                if (isPrime(num)) {
                    hash.add(num);
                }
            }
            if (chr.length == index) {
                return;
            }
            for (int i = 0; i < chr.length; i++) {
                if (visited[i]) {
                    continue;
                }
                visited[i] = true;

                recursion(str + chr[i], index + 1);

                visited[i] = false;
            }
        }

        private boolean isPrime(int num) {
            if (num == 0 || num == 1) {
                return false;
            }
            for (int i = 2; i * i <= num; i++) {
                if (num % i == 0) {
                    return false;
                }
            }
            return true;
        }
    }

