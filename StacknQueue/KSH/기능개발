import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
    Queue<Integer> q = new LinkedList<>();
    List<Integer> list = new ArrayList<>();
        
        for(int i=0; i<speeds.length; i++) {
            double remain = (100-progresses[i]) / (double)speeds[i];     // remain에 100으로 만드려면 며칠걸리는지 실수값으로 선언
                int k = (int) Math.ceil(remain);                         // ceil 함수를 통해 반올림 후 int형으로 저장
            q.add(k);                                 
        }
            
           while(!q.isEmpty()) {
               
               int t = q.poll();                                      // t에 맨 앞에값을 넣은 후 q에서 맨 앞에 값 삭제        
               int count  = 1;                                           
               while(!q.isEmpty() && q.peek() <= t) {                 // q가 비어있지않고, q에 맨앞에 값이 t값보다 작으면 
                   q.poll();                                          // 지금 맨 앞에 있는 값 q에서 삭제
                   count++;                                           // count값 증가
               }
               
               list.add(count);                                       // 여기서 count는 q를 뺀 값과 같음
               
               
           }
        
        
        
        int[] a = new int[list.size()];                                list값 int 배열로 값 옮기기     
        for(int i=0; i<a.length; i++) {
            a[i] = list.get(i);
        }
        
        return a;
    }
}
