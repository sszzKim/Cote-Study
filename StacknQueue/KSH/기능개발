import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
    Queue<Integer> q = new LinkedList<>();
    List<Integer> list = new ArrayList<>();
        
        for(int i=0; i<speeds.length; i++) {
            double remain = (100-progresses[i]) / (double)speeds[i];
                int k = (int) Math.ceil(remain);
            q.add(k);
        }
            
           while(!q.isEmpty()) {
               
               int t = q.poll();
               int count  = 1;
               while(!q.isEmpty() && q.peek() <= t) {
                   q.poll();
                   count++;
               }
               
               list.add(count);
               
               
           }
        
        
        
        int[] a = new int[list.size()];
        for(int i=0; i<a.length; i++) {
            a[i] = list.get(i);
        }
        
        return a;
    }
}
