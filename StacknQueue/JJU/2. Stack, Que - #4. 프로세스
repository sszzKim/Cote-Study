from collections import deque

def solution(priorities, location):
    pri = deque(enumerate(priorities))
    # pri = ([index(location), priorities])
    # pri = ([0,2],[1,1],[2,3],[3,2])
    # deque 클래스를 활용하여 시간 적합도를 줄여줌.
    # location을 찾기 위해 인덱스를 활용
    
    answer = []
    while(list(pri) != []):
        if pri[0][1] != max([j for _,j in pri]):        
    # [j for _,j in pri] pri 중 뒤에 있는 값을 j로 받아옴
    # max를 사용한 건 우선순위가 가장 높은 것을 찾기 위해  
            pri.rotate(-1)
    # pri의 첫번째 원소의 prorities가 우선순위가 가장 높지 않다면, 반시계 방향으로 회전
    # [1,3,2,2]
        else:
             answer.append(pri.popleft())
    # pri의 첫번째 원소의 prorities가 우선순위가 가장 높다면 answer에 추가
    # return answer
    # [[2,3],[3,2],[0,2],[1,1]]
    # [[2,9],[3,1],[4,1],[5,1],[0,1],[1,1]]
    
    return [i+1 for i, j in enumerate(answer) if j[0] == location][0]
    # enumerate(answer) = ([0,[2,3]],[1,[3,2]],[2,[0,2]],[3,[1,1]])
    # 인덱스가 = location인 녀석이 언제 나왔는지!!
